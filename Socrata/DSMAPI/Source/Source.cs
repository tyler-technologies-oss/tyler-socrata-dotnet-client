using System.Collections.Generic;
using System.Linq;
using System;
using System.Text;

namespace Socrata.DSMAPI {
    using Socrata.HTTP;
    public class Source {
        private SocrataHttpClient httpClient;
        public SourceResource Metadata;
        public SourceLinks Links;
        string fourfour;
        public Source(SocrataHttpClient httpClient, SourceResource resource, SourceLinks links, string fourfour)
        {
            this.httpClient = httpClient;
            this.Metadata = resource;
            this.Links = links;
            this.fourfour = fourfour;
        }

        public SourceResponse UpdateOutputSchema(List<OutputSchemaColumn> updatedColumns)
        {
            Dictionary<string, object> updatedSchema = new Dictionary<string, object>();
            updatedSchema.Add("output_columns", updatedColumns);
            string transformInputSchemaLink = Links.InputSchemaLinks.Transform.Replace("{input_schema_id}", this.Metadata.GetLatestInputSchema().Id.ToString());
            return httpClient.PostJson<SourceResponse>(transformInputSchemaLink, updatedSchema);
        }

        public ByteUploadResponse AddBytesToSource(string data)
        {
            return httpClient.PostBytes<ByteUploadResponse>(this.Links.Bytes, Encoding.UTF8.GetBytes(data));
        }

        public ByteSink StreamingSource(ContentType contentType)
        {
            Dictionary<string, object> contentTypeDict = new Dictionary<string, object>();
            contentTypeDict.Add("content_type", contentType.Value);
            InitiateResponse initiateResponse = httpClient.PostJson<InitiateResponse>(this.Links.Initiate, contentTypeDict);
            return new ByteSink(httpClient, this.Links.Chunk, initiateResponse);
        }

        /// <summary>
        /// Await the completion of the update, optionally output the status.
        /// </summary>
        /// <param name="lambda">A lambda function for outputting status if desired.</param>
        public void AwaitCompletion(Action<string> lambda)
        {
            while (true)
            {
                SourceResponse req = httpClient.GetJson<SourceResponse>(this.Links.Show);
                string completed_at = req.Resource.InputSchemas.First().OutputSchemas.First().CompletedAt; // this.result.Resource["schemas"][0]["output_schemas"][0]["completed_at"];
                if (String.IsNullOrEmpty(completed_at))
                {
                    lambda("Working...");
                    System.Threading.Thread.Sleep(1000);
                } else
                {
                    lambda("complete");
                    this.Metadata = req.Resource;
                    this.Links = req.Links;
                    break;
                }
            }
        }

        /// <summary>
        /// Returns true if any errors rows have been generated by the source.
        /// </summary>
        public bool HasErrorRows()
        {
            return this.NumberOfErrors() > 0;
        }

        /// <summary>
        /// Returns the number of error rows generated by the source.
        /// </summary>
        public int NumberOfErrors()
        {
            SourceResponse req = httpClient.GetJson<SourceResponse>(this.Links.Show);
            this.Links = req.Links;
            this.Metadata = req.Resource;
            return this.Metadata.GetLatestInputSchema().OutputSchemas.OrderByDescending(x => x.Id).First().error_count.GetValueOrDefault(0);
        }

        /// <summary>
        /// Returns the number of error rows generated by the source.
        /// </summary>
        public void ExportErrorRows(string outpath)
        {
            OutputSchemaModel Ids = this.Metadata.GetLatestInputSchema().OutputSchemas.OrderByDescending(x => x.Id).First();
            string Endpoint = this.Links.InputSchemaLinks.OutputSchemaLinks.SchemaErrors.Replace("{input_schema_id}", Ids.InputSchemaId.ToString()).Replace("{output_schema_id}", Ids.Id.ToString());
            var req = httpClient.Get(Endpoint, "text/csv");
            using (System.IO.FileStream fs = System.IO.File.Create(outpath))
            {
                var bs = req.Content.ReadAsByteArrayAsync().Result;
                fs.Write(bs);
            }
        }

        public OutputSchema GetLatestOutputSchema()
        {
            OutputSchemaModel Ids = this.Metadata.GetLatestInputSchema().OutputSchemas.OrderByDescending(x => x.Id).First();
            string TransformEndpoint = this.Links.InputSchemaLinks.Transform.Replace("{input_schema_id}", Ids.InputSchemaId.ToString());
            string Show = this.Links.InputSchemaLinks.Transform.Replace("{input_schema_id}", Ids.InputSchemaId.ToString()).Replace("{output_schema_id}", Ids.Id.ToString());
            return this.Metadata.GetLatestInputSchema().GetLatestOutputSchema(this.httpClient, TransformEndpoint, Show);
        }

    }
}
